datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubUsers ClubUser[]

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Club {
  id       String  @id @default(cuid())
  name     String  @unique
  clubType String
  logoUrl  String?

  clubUsers ClubUser[]
  ClubNews  ClubNews[]
  Teams     Team[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClubRole {
  CLUB_USER
  CLUB_WEBMASTER
  CLUB_ADMIN
  CLUB_OWNER
}

model ClubUser {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  club      Club       @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubRoles ClubRole[]
  ClubNews  ClubNews[]
  TeamUsers TeamUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  clubId String

  @@unique([userId, clubId])
}

model ClubNews {
  id        String             @id @default(cuid())
  title     String
  body      String
  isPublic  Boolean            @default(false)
  imageUrls ClubNewsImageUrl[]

  club   Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  author ClubUser? @relation(fields: [clubUserId], references: [id])

  clubId     String
  clubUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClubNewsImageUrl {
  id  String @id @default(cuid())
  url String

  clubNews   ClubNews @relation(fields: [clubNewsId], references: [id], onDelete: Cascade)
  clubNewsId String
}

enum TeamRole {
  TEAM_LEADER
  TEAM_PLAYER
  TEAM_WEBMASTER
  TEAM_PARENT
}

model TeamUser {
  id        String     @id @default(cuid())
  clubUser  ClubUser   @relation(fields: [clubUserId], references: [id], onDelete: Cascade)
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamRoles TeamRole[]

  clubUserId String
  teamId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          String     @id @default(cuid())
  name        String
  club        Club       @relation(fields: [clubId], references: [id], onDelete: Cascade)
  description String
  TeamUsers   TeamUser[]
  logoUrl     String?

  clubId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
